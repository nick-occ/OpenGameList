{"version":3,"sources":["login.component.ts"],"names":["LoginComponent","fb","router","authService","this","title","loginForm","loginError","externalProviderWindow","group","username","forms_1","Validators","required","password","prototype","performLogin","e","_this","preventDefault","value","login","subscribe","data","auth","getAuth","alert","access_token","navigate","err","console","log","onRegister","callExternalLogin","providerName","url","w","screen","width","h","height","params","close","window","open","__decorate","core_1","Component","selector","template","exports_1"],"mappings":"igCAoCAA,eAAA,WAMI,QAAAA,gBAAoBC,GACRC,OACAC,aAFQC,KAAAH,GAAAA,GACRG,KAAAF,OAAAA,OACAE,KAAAD,YAAAA,YAPZC,KAAAC,MAAQ,QACRD,KAAAE,UAAY,KACZF,KAAAG,YAAa,EACbH,KAAAI,uBAAyB,KAWrBJ,KAAKE,UAAYL,GAAGQ,OAChBC,UAAW,GAAIC,QAAAC,WAAWC,UAC1BC,UAAW,GAAIH,QAAAC,WAAWC,YAwCtC,MApCIb,gBAAAe,UAAAC,aAAA,SAAaC,GAAb,GAAAC,OAAAd,IACIa,GAAEE,gBACF,IAAIT,UAAWN,KAAKE,UAAUc,MAAMV,SAChCI,SAAWV,KAAKE,UAAUc,MAAMN,QACpCV,MAAKD,YAAYkB,MAAMX,SAAUI,UAC5BQ,UAAU,SAACC,MAERL,MAAKX,YAAa,CAClB,IAAIiB,MAAON,MAAKf,YAAYsB,SAC5BC,OAAM,iBAAmBF,KAAKG,cAC9BT,MAAKhB,OAAO0B,UAAU,MACvB,SAACC,KACAC,QAAQC,IAAIF,KAEZX,MAAKX,YAAa,KAI9BP,eAAAe,UAAAiB,WAAA,WACI5B,KAAKF,OAAO0B,UAAU,cAG1B5B,eAAAe,UAAAkB,kBAAA,SAAkBC,cACd,GAAIC,KAAM,8BAAgCD,aAEtCE,EAAKC,OAAOC,OAAS,KAAQ,KAAOD,OAAOC,MAC3CC,EAAKF,OAAOG,QAAU,IAAO,IAAMH,OAAOG,OAE1CC,OAAS,kDAAoDL,EAAI,YAAcG,CAG/EnC,MAAKI,wBACLJ,KAAKI,uBAAuBkC,QAEhCtC,KAAKI,uBAAyBmC,OAAOC,KAAKT,IAAK,mBAAoBM,QAAQ,IArFnFzC,eAAA6C,YAACC,OAAAC,WACGC,SAAU,QACVC,SAAU,i9CA4BdC,UAAA,iBAAAlD","file":"login.component.js","sourcesContent":["import { Component } from \"@angular/core\";\r\nimport { FormBuilder, Validators } from \"@angular/forms\"; \r\nimport { Router } from \"@angular/router\"; \r\nimport { AuthService } from \"./auth.service\";\r\nimport { UserEditComponent } from \"./user-edit.component\";\r\n\r\n@Component({\r\n    selector: \"login\",\r\n    template: ` \r\n       <div class=\"login-container\">\r\n            <h2 class=\"form-login-heading\">Login</h2>\r\n            <div class=\"alert alert-danger\" role=\"alert\" *ngIf=\"loginError\">\r\n                <strong>Warning:</strong> Username or Password mismatch\r\n            </div> \r\n            <form class=\"form-login\" [formGroup]=\"loginForm\" (submit)=\"performLogin($event)\">\r\n                <input formControlName=\"username\" type=\"text\" class=\"form-control\" placeholder=\"Your username or e-mail address\" required autofocus /> \r\n                <input formControlName=\"password\" type=\"password\" class=\"form-control\" placeholder=\"Your password\" required /> \r\n                <div class=\"checkbox\">\r\n                    <label>\r\n                        <input type=\"checkbox\" value=\"remember-me\">\r\n                        Remember Me\r\n                    </label>\r\n                </div>\r\n                <button class=\"btn btn-lg btn-primary btn-block\" type=\"submit\">Sign in</button>\r\n            </form>\r\n            <div class=\"register-link\">\r\n                Don't have an account yet?\r\n                <a (click)=\"onRegister()\">Click here to register!</a>\r\n            </div>\r\n            <button class=\"btn btn-sm btn-default btn-block\" type=\"submit\" (click)=\"callExternalLogin('Google')\"> \r\n                Login with Google \r\n            </button> \r\n        </div>\r\n    `\r\n})\r\n\r\nexport class LoginComponent {\r\n    title = \"Login\"\r\n    loginForm = null;\r\n    loginError = false;\r\n    externalProviderWindow = null; \r\n\r\n    constructor(private fb: FormBuilder,\r\n        private router: Router,\r\n        private authService: AuthService) {\r\n        /*\r\n        if (this.authService.isLoggedIn()) {\r\n            this.router.navigate([\"\"]);\r\n        }\r\n        */\r\n\r\n        this.loginForm = fb.group({\r\n            username: [\"\", Validators.required],\r\n            password: [\"\", Validators.required]\r\n        });\r\n    }\r\n\r\n    performLogin(e) {\r\n        e.preventDefault();\r\n        var username = this.loginForm.value.username;\r\n        var password = this.loginForm.value.password;\r\n        this.authService.login(username, password)\r\n            .subscribe((data) => {\r\n                //login successful\r\n                this.loginError = false;\r\n                var auth = this.authService.getAuth();\r\n                alert(\"Our Token is: \" + auth.access_token);\r\n                this.router.navigate([\"\"]);\r\n            }, (err) => {\r\n                console.log(err);\r\n                //login failure\r\n                this.loginError = true;\r\n            });\r\n    }\r\n\r\n    onRegister() {\r\n        this.router.navigate([\"register\"]);\r\n    }\r\n\r\n    callExternalLogin(providerName: string) {\r\n        var url = \"api/Accounts/ExternalLogin/\" + providerName;\r\n        //minimalistic mobile devices support\r\n        var w = (screen.width >= 1050) ? 1050 : screen.width;\r\n        var h = (screen.height >= 550) ? 550 : screen.height;\r\n\r\n        var params = \"toolbar=yes,scrollbars=yes,resizable=yes,width=\" + w + \", height=\" + h;\r\n\r\n        //closed previously opened windows (if any)\r\n        if (this.externalProviderWindow) {\r\n            this.externalProviderWindow.close();\r\n        }\r\n        this.externalProviderWindow = window.open(url, \"ExternalProvider\", params, false);\r\n    }\r\n} "]}