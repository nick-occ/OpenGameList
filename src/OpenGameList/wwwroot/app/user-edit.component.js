System.register(["@angular/core","@angular/forms","@angular/router","./auth.service","./user"],function(exports_1,context_1){"use strict";var core_1,forms_1,router_1,auth_service_1,user_1,UserEditComponent,__decorate=(context_1&&context_1.id,this&&this.__decorate||function(decorators,target,key,desc){var d,c=arguments.length,r=c<3?target:null===desc?desc=Object.getOwnPropertyDescriptor(target,key):desc;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--)(d=decorators[i])&&(r=(c<3?d(r):c>3?d(target,key,r):d(target,key))||r);return c>3&&r&&Object.defineProperty(target,key,r),r}),__metadata=this&&this.__metadata||function(k,v){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(k,v)};return{setters:[function(core_1_1){core_1=core_1_1},function(forms_1_1){forms_1=forms_1_1},function(router_1_1){router_1=router_1_1},function(auth_service_1_1){auth_service_1=auth_service_1_1},function(user_1_1){user_1=user_1_1}],execute:function(){UserEditComponent=function(){function UserEditComponent(fb,router,activatedRoute,authService){this.fb=fb,this.router=router,this.activatedRoute=activatedRoute,this.authService=authService,this.title="New User Registration",this.userForm=null,this.errorMessage=null,this.isRegister="register"===activatedRoute.snapshot.url.toString(),(this.isRegister&&this.authService.isLoggedIn()||!this.isRegister&&!this.authService.isLoggedIn())&&this.router.navigate([""]),this.isRegister||(this.title="Edit Account")}return UserEditComponent.prototype.ngOnInit=function(){var _this=this;if(this.userForm=this.fb.group({username:["",[forms_1.Validators.required,forms_1.Validators.pattern("[a-zA-Z0-9]+")]],email:["",[forms_1.Validators.required,forms_1.Validators.pattern("[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?")]],password:["",[forms_1.Validators.required,forms_1.Validators.minLength(6)]],passwordConfirm:["",[forms_1.Validators.required,forms_1.Validators.minLength(6)]],displayName:["",null]},{validator:this.compareValidator("password","passwordConfirm")}),!this.isRegister){this.userForm.addControl("passwordCurrent",new forms_1.FormControl("",forms_1.Validators.required));var password=this.userForm.find("password");password.clearValidators(),password.setValidators(forms_1.Validators.minLength(6));var passwordConfirm=this.userForm.find("passwordConfirm");passwordConfirm.clearValidators(),passwordConfirm.setValidators(forms_1.Validators.minLength(6)),this.authService.get().subscribe(function(user){_this.userForm.find("username").setValue(user.UserName),_this.userForm.find("email").setValue(user.Email),_this.userForm.find("displayName").setValue(user.DisplayName)})}},UserEditComponent.prototype.compareValidator=function(fc1,fc2){return function(group){var password=group.controls[fc1],passwordConfirm=group.controls[fc2];return password.value===passwordConfirm.value?null:{compareFailed:!0}}},UserEditComponent.prototype.onsubmit=function(){var _this=this;if(this.isRegister)this.authService.add(this.userForm.value).subscribe(function(data){null==data.error?(_this.errorMessage=null,_this.authService.login(_this.userForm.value.username,_this.userForm.value.password).subscribe(function(data){_this.errorMessage=null,_this.router.navigate([""])},function(err){console.log(err),_this.errorMessage="Warning: Username or Password mismatch"})):_this.errorMessage=data.error},function(err){_this.errorMessage=err});else{var user=new user_1.User(this.userForm.value.username,this.userForm.value.password,this.userForm.value.passwordNew,this.userForm.value.email,this.userForm.value.displayName);this.authService.update(user).subscribe(function(data){null==data.error?(_this.errorMessage=null,_this.router.navigate([""])):_this.errorMessage=data.error},function(err){_this.errorMessage=err})}},UserEditComponent=__decorate([core_1.Component({selector:"user-edit",template:'\n        <div class="user-container"> \n            <form class="form-user" [formGroup]="userForm" (submit)="onSubmit()"> \n                <h2 class="form-user-heading">{{title}}</h2> \n                <div class="form-group"> \n                    <input [disabled]="!this.isRegister" formControlName="username" type="text" class="form-control" placeholder="Choose an Username" autofocus /> \n                    <span class="validator-label valid" *ngIf="this.userForm.controls.username.valid"> \n                        <span class="glyphicon glyphicon-ok" aria-hidden="true"></span> \n                        valid! \n                    </span> \n                    <span class="validator-label invalid" *ngIf="!this.userForm.controls.username.valid && !this.userForm.controls.username.pristine"> \n                        <span class="glyphicon glyphicon-remove" aria-hidden="true"></span> \n                        invalid \n                    </span> \n                </div> \n                <div class="form-group"> \n                    <input formControlName="email" type="text" class="form-control" placeholder="Type your e-mail address" /> \n                    <span class="validator-label valid" *ngIf="this.userForm.controls.email.valid"> \n                        <span class="glyphicon glyphicon-ok" aria-hidden="true"></span> \n                        valid! \n                    </span> \n                    <span class="validator-label invalid" *ngIf="!this.userForm.controls.email.valid && !this.userForm.controls.email.pristine"> \n                        <span class="glyphicon glyphicon-remove" aria-hidden="true"></span> \n                        invalid \n                    </span> \n                </div> \n                <div *ngIf="!this.isRegister" class="form-group"> \n                    <input formControlName="passwordCurrent" type="password" class="form-control" placeholder="Current Password" /> \n                    <span class="validator-label invalid" *ngIf="!this.userForm.controls.passwordCurrent.valid"> \n                        <span class="glyphicon glyphicon-remove" aria-hidden="true"></span> \n                        required \n                    </span> \n                </div> \n                <div class="form-group"> \n                    <input formControlName="password" type="password" class="form-control" placeholder="Choose a Password" /> \n                    <span class="validator-label valid" *ngIf="this.userForm.controls.password.valid && !this.userForm.controls.password.pristine"> \n                        <span class="glyphicon glyphicon-ok" aria-hidden="true"></span> \n                        valid! \n                    </span> \n                    <span class="validator-label invalid" *ngIf="!this.userForm.controls.password.valid && !this.userForm.controls.password.pristine"> \n                        <span class="glyphicon glyphicon-remove" aria-hidden="true"></span> \n                        invalid \n                    </span> \n                </div> \n                <div class="form-group"> \n                    <input formControlName="passwordConfirm" type="password" class="form-control" placeholder="Confirm your Password" /> \n                    <span class="validator-label valid" *ngIf="this.userForm.controls.passwordConfirm.valid && !this.userForm.controls.password.pristine && !this.userForm.hasError(\'compareFailed\')"> \n                        <span class="glyphicon glyphicon-ok" aria-hidden="true"></span> \n                        valid! \n                    </span> \n                    <span class="validator-label invalid" *ngIf="(!this.userForm.controls.passwordConfirm.valid && !this.userForm.controls.passwordConfirm.pristine) || this.userForm.hasError(\'compareFailed\')"> \n                        <span class="glyphicon glyphicon-remove" aria-hidden="true"></span> \n                        invalid \n                    </span> \n                </div> \n                <div class="form-group"> \n                    <input formControlName="displayName" type="text" class="form-control" placeholder="Choose a Display Name" /> \n                </div> \n                <div class="form-group"> \n                    <input type="submit" class="btn btn-primary btn-block" [disabled]="!userForm.valid" value="{{this.isRegister ? \'Register\' : \'Save\'}}" /> \n                </div> \n            </form> \n        </div> \n    '}),__metadata("design:paramtypes",[forms_1.FormBuilder,router_1.Router,router_1.ActivatedRoute,auth_service_1.AuthService])],UserEditComponent)}(),exports_1("UserEditComponent",UserEditComponent)}}});
//# sourceMappingURL=user-edit.component.js.map
